#!/usr/bin/env node

/**
 * Test script for Azure DevOps MCP Server attachment tools
 * 
 * This script demonstrates how to test the attachment functionality manually.
 * Make sure you have:
 * 1. Built the project with `npm run build`
 * 2. Logged in to Azure DevOps with `az login`
 * 3. A valid work item ID and project name
 */

const fs = require('fs/promises');
const path = require('path');

// Configuration - Update these values for your environment
const CONFIG = {
  // Replace with your actual ADO organization
  organization: 'your-ado-org',
  
  // Replace with a real project name
  project: 'your-project',
  
  // Replace with a real work item ID that has attachments
  workItemId: 123,
  
  // Path to a test file for upload (will be created if it doesn't exist)
  testFilePath: path.join(__dirname, 'test-attachment.txt')
};

async function createTestFile() {
  const testContent = `Test attachment file created at ${new Date().toISOString()}

This is a test file for demonstrating the Azure DevOps MCP Server attachment tools.

Features tested:
- File upload to work items
- Attachment listing
- Attachment download
- Attachment deletion

Generated by: test-attachments.js script
`;

  try {
    await fs.writeFile(CONFIG.testFilePath, testContent, 'utf8');
    console.log(`‚úÖ Created test file: ${CONFIG.testFilePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to create test file: ${error.message}`);
    return false;
  }
}

async function testAttachmentTools() {
  console.log('üß™ Azure DevOps MCP Server - Attachment Tools Test');
  console.log('=' .repeat(60));
  
  // Check configuration
  if (CONFIG.organization === 'your-ado-org' || CONFIG.project === 'your-project') {
    console.log('‚ö†Ô∏è  Please update the CONFIG object in this script with your actual:');
    console.log('   - Azure DevOps organization name');
    console.log('   - Project name');
    console.log('   - Valid work item ID');
    console.log('\nüìù Edit the CONFIG object at the top of this file.');
    return;
  }

  console.log(`üéØ Testing with:`);
  console.log(`   Organization: ${CONFIG.organization}`);
  console.log(`   Project: ${CONFIG.project}`);
  console.log(`   Work Item ID: ${CONFIG.workItemId}`);
  console.log('');

  // Test 1: List attachments
  console.log('üìã Test 1: List attachments for work item');
  console.log('   Tool: wit_get_attachments');
  console.log(`   Command: List attachments for work item ${CONFIG.workItemId} in project ${CONFIG.project}`);
  console.log('   Expected: JSON array of attachment metadata');
  console.log('');

  // Test 2: Download attachments
  console.log('‚¨áÔ∏è  Test 2: Download attachments to Downloads folder');
  console.log('   Tool: wit_download_work_item_attachments');
  console.log(`   Command: Download all attachments from work item ${CONFIG.workItemId}`);
  console.log('   Expected: Files downloaded to ~/Downloads folder');
  console.log('');

  // Test 3: Upload attachment
  const fileCreated = await createTestFile();
  if (fileCreated) {
    console.log('‚¨ÜÔ∏è  Test 3: Upload attachment from file path');
    console.log('   Tool: wit_upload_attachment_from_path');
    console.log(`   Command: Upload file "${CONFIG.testFilePath}" to work item ${CONFIG.workItemId}`);
    console.log('   Expected: Attachment uploaded and linked to work item');
    console.log('');
  }

  // Test 4: Delete attachment
  console.log('üóëÔ∏è  Test 4: Delete attachment');
  console.log('   Tool: wit_delete_attachment');
  console.log('   Command: Delete attachment by ID or URL fragment');
  console.log('   Expected: Attachment removed from work item');
  console.log('');

  console.log('üöÄ How to run these tests:');
  console.log('');
  console.log('1. Start the MCP server:');
  console.log('   npm run build && npm start');
  console.log('');
  console.log('2. In VS Code with Copilot Chat, try these prompts:');
  console.log('');
  console.log(`   "List attachments for work item ${CONFIG.workItemId} in project ${CONFIG.project}"`);
  console.log(`   "Download all attachments from work item ${CONFIG.workItemId}"`);
  console.log(`   "Upload the file ${CONFIG.testFilePath} to work item ${CONFIG.workItemId} with comment 'Test attachment'"`);
  console.log('   "Delete attachment with ID [attachment-id] from work item [work-item-id]"');
  console.log('');
  console.log('3. Or use the MCP client directly with the tool names:');
  console.log('   - wit_get_attachments');
  console.log('   - wit_download_work_item_attachments');
  console.log('   - wit_upload_attachment_from_path');
  console.log('   - wit_delete_attachment');
  console.log('');

  console.log('‚ö° Quick Test Commands (copy and paste into Copilot Chat):');
  console.log('');
  console.log(`List attachments for work item ${CONFIG.workItemId} in project ${CONFIG.project}`);
  console.log('');

  // Cleanup note
  if (fileCreated) {
    console.log('üßπ Cleanup:');
    console.log(`   The test file ${CONFIG.testFilePath} was created for testing.`);
    console.log('   You can delete it after testing is complete.');
    console.log('');
  }

  console.log('‚úÖ Test preparation complete!');
  console.log('   Update the CONFIG object above and run the suggested commands.');
}

// Run the test
testAttachmentTools().catch(console.error);
